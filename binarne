#Zadanie1

#def CzyPosortowana(T):
#    return

def WyszukiwanieBinarne(T, a, n):
    lewy = 0
    prawy = n - 1

    while lewy < prawy:
        srodek = (lewy + prawy) // 2
        if T[srodek] < a:
            lewy = srodek + 1
        else:
            prawy = srodek

    if T[lewy] == a:
        print("Tak")
    else:
        print("Nie")

def Zadanie1():
    T = []
    print("Podaj rosnący ciąg")
    for i in range(10):
        element = int(input(f"Podaj {i + 1} element: "))
        T.append(element)

    userNumber = int(input("Sprawdź czy jest w liście: "))
    WyszukiwanieBinarne(T, userNumber, 10)

Zadanie1()

#Zadanie2

def Bin(T,a,lewy,prawy):
    if lewy>prawy:
        return False
    srodek=(lewy+prawy)//2
    if T[srodek] ==a:
        return True
    elif T[srodek]<a:
        return Bin(T,a,srodek+1,prawy)
    else:
        return Bin(T,a,lewy,srodek-1)#return Bin(T,a,lewy,srodek)

T=[0,1,2,3,4,5,6,7,8,9]
print(Bin(T,6,0,9))

'''Napisz program, który wyświetli na standardowym wyjściu te ciągi liczbowe 
z pliku ciagi.txt, które zawierają liczbę 10. Wykorzystaj wyszukiwanie binarne. 
W pliku ciagi.txt każdy wiersz zawiera jeden ciąg liczb całkowitych rozdzielonych spacjami'''

#Zadanie3

def binarne(arr, target):
    left, right = 0, len(arr) - 1
    while left <= right:
        middle = (left + right) // 2
        if arr[middle] == target:
            return True
        elif arr[middle] < target:
            left = middle + 1
        else:
            right = middle - 1
    return False

def czy_10(filename):
    with open('ciagi.txt', 'r') as file:
        for line in file:
            numbers = list(map(int, line.split()))
            if binarne(numbers, 10):
                print(line.strip())

czy_10('ciagi.txt')


def binary_search(arr, target):
    left, right = 0, len(arr) - 1
    while left <= right:
        middle = (left + right) // 2
        if arr[middle] == target:
            return True
        elif arr[middle] < target:
            left = middle + 1
        else:
            right = middle - 1
    return False

def find_sequences_with_10_from_complex_file(filename):
    with open(filename, 'r') as file:
        lines = file.readlines()
        num_sequences = int(lines[0].strip())
        index = 1

        for _ in range(num_sequences):
            num_elements = int(lines[index].strip())
            sequence = list(map(int, lines[index + 1].split()))
            if len(sequence) != num_elements:
                raise ValueError("Liczba elementów w wierszu nie zgadza się z oczekiwaną wartością.")
            if binary_search(sequence, 10):
                print(" ".join(map(str, sequence)))
            index += 2

find_sequences_with_10_from_complex_file('ciagi2.txt')



